service: listen-api
frameworkVersion: "3"

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions
  - serverless-export-env

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  name: vishal
  stage: ${opt:stage, self:provider.stage}
  logRetentionInDays: 30
  logLevel:
    default: ALL
    prod: ERROR

  appSyncLogLevel:
    default: ALL
    prod: ERROR

  AssetsBucket:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.AssetsBucketName}
    Arn: ${cf:nomadmethod-api-${self:provider.stage}.AssetsBucketArn}
  ContentsTable:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.ContentsTableName}
  UserAssetsTable:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.UserAssetsTableName}
  CharactersTable:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.CharactersTableName}
  ComponentsTable:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.ComponentsTableName}
  UserCredentialsTable:
    Name: ${cf:nomadmethod-api-${self:provider.stage}.UserCredentialsTableName}
  MandarinoKMSKey:
    Arn: ${cf:nomadmethod-api-${self:provider.stage}.MandarinoKMSKeyArn}

  CognitoUserPool:
    Arn: ${cf:nomadmethod-api-${self:provider.stage}.CognitoUserPoolArn}
    Id: ${cf:nomadmethod-api-${self:provider.stage}.CognitoUserPoolId}
    ProviderName: ${cf:nomadmethod-api-${self:provider.stage}.CognitoUserPoolProviderName}

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  region: us-east-1
  memorySize: 512
  eventBridge:
    useCloudFormation: true
  environment:
    # kms_arn: !GetAtt ComposeKMSKey.Arn
    serviceName: ${self:service}
    stage: ${self:provider.stage}
    STAGE: ${self:provider.stage}
    LOG_LEVEL: ${self:custom.logLevel.${self:provider.stage}, self:custom.logLevel.default}
    USER_CREDENTIALS_TABLE: ${self:custom.UserCredentialsTable.Name}
    CONTENTS_TABLE: ${self:custom.ContentsTable.Name}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:ListTables
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - ApiGateway:*
      Resource: "*"
    - Effect: Allow
      Action:
        - cloudformation:ValidateTemplate
        - cloudformation:CreateStack
        - cloudformation:ListStackResources
        - cloudformation:DescribeStackResource
        - cloudformation:DescribeStacks
      Resource: "*"
      # Email
    - Effect: Allow
      Action: ses:SendEmail
      Resource: "*"
    - Effect: Allow
      Action: ssm:GetParameters
      Resource: "*"

    - Effect: Allow
      Action: events:*
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
      Resource: "*"

stepFunctions:
  stateMachines:
    startMediaPipeline:
      name: startMediaPipeline
      definition:
        Comment: Starts the media pipeline
        StartAt: StartMediaPipeline
        States:
          StartMediaPipeline:
            Type: Task
            Resource:
              Fn::GetAtt: [start-media-pipeline, Arn]
            End: true

functions:
  start-media-pipeline:
    handler: functions/pipeline/start-media-pipeline.handler

  trigger-media-pipeline:
    handler: functions/pipeline/trigger-media-pipeline.handler
    events:
      - http:
          path: /v1/trigger-media-pipeline
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      START_MEDIA_PIPELINE_STEP_FUNCTION:
        Fn::GetAtt: [StartMediaPipeline, Arn]
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
  add-translations:
    timeout: 300
    handler: functions/listen/add-translations.handler
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
      USER_ASSETS_TABLE: ${self:custom.UserAssetsTable.Name}
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt MediaTable.StreamArn

  get-media:
    handler: functions/listen/get-media.handler
    events:
      - http:
          path: /v1/get-media
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
  update-media:
    handler: functions/listen/update-media.handler
    events:
      - http:
          path: /v1/update-media
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket

  list-medias:
    handler: functions/listen/list-medias.handler
    events:
      - http:
          path: /v1/list-medias
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket

  add-media:
    handler: functions/listen/add-media.handler
    events:
      - http:
          path: /v1/add-media
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
  delete-media:
    handler: functions/listen/delete-media.handler
    events:
      - http:
          path: /v1/delete-media
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_TABLE: !Ref MediaTable
      MEDIA_FILES_TABLE: !Ref MediaFilesTable
      MEDIA_FILES_TABLE_V2: !Ref MediaFilesTableV2
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
  get-upload-url:
    handler: functions/media/get-upload-url.handler
    events:
      - http:
          path: /v1/get-upload-url
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
        Resource: !Sub ${MediaAssetsBucket.Arn}/*
  get-presigned-url:
    handler: functions/media/get-presigned-url.handler
    events:
      - http:
          path: /v1/get-presigned-url
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      MEDIA_ASSETS_BUCKET: ${self:custom.AssetsBucket.Name}
      # MEDIA_ASSETS_BUCKET: !Ref MediaAssetsBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: !Sub ${MediaAssetsBucket.Arn}/*
  list-voices:
    handler: functions/speechify/list-voices.handler
    events:
      - http:
          path: /v1/speechify/list-voices
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
  # Books
  list-books:
    handler: functions/book/list-books.handler
    events:
      - http:
          path: /v1/list-books
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
  add-book:
    handler: functions/book/add-book.handler
    events:
      - http:
          path: /v1/add-book
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
  get-book:
    handler: functions/book/get-book.handler
    events:
      - http:
          path: /v1/get-book
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
  update-book:
    handler: functions/book/update-book.handler
    events:
      - http:
          path: /v1/update-book
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
  delete-book:
    handler: functions/book/delete-book.handler
    events:
      - http:
          path: /v1/delete-book
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
  add-book-section:
    handler: functions/book/add-book-section.handler
    events:
      - http:
          path: /v1/add-book-section
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
      BOOK_SECTIONS_TABLE: !Ref BookSectionsTable
  list-chapter-sections:
    handler: functions/book/list-chapter-sections.handler
    events:
      - http:
          path: /v1/list-chapter-sections
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      BOOKS_TABLE: !Ref BooksTableV2
      CHAPTER_SECTIONS_TABLE: !Ref ChapterSectionsTable
  get-audio:
    handler: functions/jetto/get-audio.handler
    events:
      - http:
          path: /v1/get-audio
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      TEXT_TO_SPEECH_TABLE: !Ref TextToSpeechTable
  get-content-analytics:
    handler: functions/content-analytics/get-content-analytics.handler
    events:
      - http:
          path: /v1/get-content-analytics
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      CONTENT_ANALYTICS_TABLE: !Ref ContentAnalyticsTable
  upsert-content-analytics:
    handler: functions/content-analytics/upsert-content-analytics.handler
    events:
      - http:
          path: /v1/upsert-content-analytics
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      CONTENT_ANALYTICS_TABLE: !Ref ContentAnalyticsTable
  get-youtube-video-by-id:
    handler: functions/youtube/get-video-by-id.handler
    events:
      - http:
          path: /v1/youtube/get-video-by-id
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      CONTENT_ANALYTICS_TABLE: !Ref ContentAnalyticsTable
  list-youtube-trancriptions:
    handler: functions/youtube/list-transcriptions.handler
    events:
      - http:
          path: /v1/youtube/list-transcriptions
          method: POST
          cors: true
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.CognitoUserPool.Arn}
    environment:
      CONTENT_ANALYTICS_TABLE: !Ref ContentAnalyticsTable

resources:
  Resources:
    MediaAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccelerateConfiguration:
          AccelerationStatus: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
    MediaAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MediaAssetsBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: Statement2
              Effect: Allow
              Principal: "*"
              Action: "s3:*"
              Resource:
                - !Sub "arn:aws:s3:::${MediaAssetsBucket}"
                - !Sub "arn:aws:s3:::${MediaAssetsBucket}/*"
    MediaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: media-table
    MediaFilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: media-files-table
    MediaFilesTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: mediaId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byMediaId
            KeySchema:
              - AttributeName: mediaId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: media-files-table-v2
    BooksTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: books-table-v2
    BookSectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byBookId
            KeySchema:
              - AttributeName: bookId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: book-sections-table
    ChapterSectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: chapterId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byChapterId
            KeySchema:
              - AttributeName: chapterId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: chapter-sections-table
    TextToSpeechTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: text-to-speech-table
    PlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: plans-table
    PlansTableProd:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: plans-table-prod
    ContentAnalyticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: byUserId
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          # To keep track of user table for diffeent environment
          - Key: Environment
            Value: ${self:custom.stage}
          - Key: Name
            Value: content-analytics-table
